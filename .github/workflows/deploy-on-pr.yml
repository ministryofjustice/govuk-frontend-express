name: Deploy on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-linting:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  code-security-audit:
    name: Code Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        run: npm install

      - name: Run security audit
        run: npm audit

  deploy:
    environment: dev
    name: Deploy
    runs-on: ubuntu-latest
    needs: [code-linting, code-security-audit]

    permissions: 
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required to add a comment to the PR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v4.0.2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build and push Docker image
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Deploy to Kubernetes
        run: |
          cat deployments/templates/deployment.yml | envsubst > deployments/deployment.yml
          cat deployments/templates/ingress.yml | envsubst > deployments/ingress.yml
          cat deployments/templates/service.yml | envsubst > deployments/service.yml
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
          kubectl -n ${NAMESPACE} apply -f deployments/

        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          CONTACT_EMAIL: ${{ secrets.CONTACT_EMAIL || vars.CONTACT_EMAIL }}
          CONTACT_PHONE: ${{ secrets.CONTACT_PHONE || vars.CONTACT_PHONE }}
          DEPARTMENT_NAME: ${{ secrets.DEPARTMENT_NAME || vars.DEPARTMENT_NAME || 'Ministry of Justice' }}
          DEPARTMENT_URL: ${{ secrets.DEPARTMENT_URL || vars.DEPARTMENT_URL }}
          RATELIMIT_HEADERS_ENABLED: ${{ secrets.RATELIMIT_HEADERS_ENABLED || vars.RATELIMIT_HEADERS_ENABLED || true }}
          RATELIMIT_STORAGE_URI: ${{ secrets.RATELIMIT_STORAGE_URI || vars.RATELIMIT_STORAGE_URI }}
          RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX || vars.RATE_LIMIT_MAX || '100' }}
          RATE_WINDOW_MS: ${{ secrets.RATE_WINDOW_MS || vars.RATE_WINDOW_MS || '900000' }}
          SECRET_KEY: ${{ secrets.SECRET_KEY || vars.SECRET_KEY }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME || vars.SERVICE_NAME || 'MOJ Express Skeleton' }}
          SERVICE_PHASE: ${{ secrets.SERVICE_PHASE || vars.SERVICE_PHASE || 'Alpha' }}
          SERVICE_URL: ${{ secrets.SERVICE_URL || vars.SERVICE_URL }}

      - name: Output deployment URL
        id: deployment-url
        run: echo "https://${{ secrets.KUBE_CLUSTER }}/"

      - name: Comment on PR with deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const url = `https://${{ secrets.KUBE_CLUSTER }}/`;
            console.log("issue number is " + context.issue.number);
            console.log("repo owner is " + context.repo.owner);
            console.log("repo is " + context.repo.repo);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deployment successful`
              // body: `Deployment URL: ${url}`
            });